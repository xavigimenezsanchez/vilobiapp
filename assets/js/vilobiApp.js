angular.module("vilobiApp",["ui.router","ngMaterial","sasrio.angular-material-sidenav"]),angular.module("vilobiApp").config(["$mdThemingProvider","ssSideNavSectionsProvider",function(e,t){t.initWithTheme(e),t.initWithSections([{id:"Home",name:"Home",state:"common.home",type:"link"},{id:"Supervisor",name:"Supervisor",state:"common.supervisor",type:"link"}])}]),angular.module("vilobiApp").config(["$mdThemingProvider",function(e){e.theme("dark-grey").backgroundPalette("grey").dark(),e.theme("dark-orange").backgroundPalette("orange").dark(),e.theme("dark-purple").backgroundPalette("deep-purple").dark(),e.theme("dark-blue").backgroundPalette("blue").dark(),e.theme("dark-red").backgroundPalette("red").dark(),e.theme("default").primaryPalette("blue").accentPalette("orange"),e.definePalette("machinePalete",{50:"ffcdd2",100:"ffcdd2",200:"ef9a9a",300:"e57373",400:"ef5350",500:"f44336",600:"e53935",700:"d32f2f",800:"c62828",900:"b71c1c",A100:"000000",A200:"ff5252",A400:"ff1744",A700:"d50000",contrastDefaultColor:"light",contrastDarkColors:["50","100","200","300","400","A100"],contrastLightColors:void 0}),e.theme("machine").primaryPalette("blue").backgroundPalette("machinePalete"),e.definePalette("breadcrumbsPaletteName",{50:"FFFFFF",100:"ffcdd2",200:"ef9a9a",300:"e57373",400:"ef5350",500:"f44336",600:"e53935",700:"d32f2f",800:"c62828",900:"b71c1c",A100:"ff8a80",A200:"ff5252",A400:"ff1744",A700:"d50000",contrastDefaultColor:"light",contrastDarkColors:["50","100","200","300","400","A100"],contrastLightColors:void 0}),e.theme("breadcrumbs").primaryPalette("breadcrumbsPaletteName",{"default":"50"}),e.theme("process").backgroundPalette("green"),e.theme("setup").backgroundPalette("amber"),e.theme("pull").backgroundPalette("blue"),e.theme("end").backgroundPalette("red"),e.theme("ncdown").backgroundPalette("orange"),e.theme("down").backgroundPalette("deep-orange"),e.theme("error").backgroundPalette("grey"),e.theme("semaphorRed").primaryPalette("red").backgroundPalette("red",{"default":"100"}).dark(),e.theme("semaphorOrange").primaryPalette("orange").backgroundPalette("orange",{"default":"100"}).dark(),e.theme("semaphorGreen").primaryPalette("green").accentPalette("green").backgroundPalette("green",{"default":"100"}).dark(),e.alwaysWatchTheme(!0)}]),angular.module("vilobiApp").config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,a){t.otherwise("/"),a.html5Mode(!0),t.otherwise(function(){return"/"}),e.state("common",{"abstract":!0,templateUrl:"templates/_common.html",controller:"menuController"}).state("common.home",{url:"/",templateUrl:"templates/home.html",controller:"homeController",breadCrumbs:"home"}).state("common.machine",{url:"/machine/:id",templateUrl:"/templates/machine.html",controller:"bitScreenController",breadCrumbs:"machine"}).state("common.machineRegular",{url:"/machineRegular/:id",templateUrl:"/templates/machineRegular.html",controller:"machineRegularController",breadCrumbs:"machine"}).state("common.machinesRegular",{url:"/machinesRegular/:id",templateUrl:"/templates/machinesRegular.html",controller:"machinesRegularController",breadCrumbs:"machines"}).state("common.supervisor",{url:"/supervisor",templateUrl:"/templates/supervisor2.html",controller:"supervisorController",breadCrumbs:"supervisor"}).state("common.supervisorMachine",{url:"/supervisor/:id",templateUrl:"/templates/supervisorMachine.html",controller:"superMachineController",breadCrumbs:"detall supervisor"}).state("common.material",{url:"/material/:id",templateUrl:"/templates/material.html",controller:"materialController",breadCrumbs:"material"})}]),angular.module("vilobiApp").controller("bitScreenController",["$scope","$http","$stateParams","ofSrv","machineStateSrv","driverSrv","$location","$state","$interval","$timeout","$mdSidenav","supervisorSrv",function(e,t,a,n,r,o,i,c,l,s,m,u){function h(){function a(){t.get("../../api/machine/"+d).success(function(t){for(var a=t,r=[],o=0,i=0;6>i&&o<t.length;)new Date(a[o].DATASTART)>Date.now()&&e.machineInfo.of!=a[o].OF?r[i++]=a[o++]:o++;e.sfFirst=r,n.materialAvaliable(e.machineInfo.id,r).then(function(t){t.forEach(function(e){e.avaliable&&e.avaliable.forEach(function(e,t,a){switch(e.avaliable){case 0:a[t].semaphor="semaphorRed";break;case 1:a[t].semaphor="semaphorOrange";break;case 2:a[t].semaphor="semaphorGreen"}})}),e.sfFirst=t})})}u.machineOne(d).success(function(t){e.machineInfo=t,e.machineInfo.ofState=r.get(t.status),t.quantityPlanned&&0!=t.quantityPlanned&&t.ofCompleted&&(e.machineInfo.ofCompletedPercent=100*t.ofCompleted/t.quantityPlanned),a()},function(e){console.log(e)})}var d=(i.absUrl().split("/"),a.id);e.$emit("Machine"),e.machineInfo={},e.sfFirst=[],e.goSupervisor=function(){e.$emit("MachineOut"),c.go("common.supervisor")},e.goBack=function(){e.$emit("MachineOut");var t=o.getState();try{c.go(t.id,{id:t.param})}catch(a){c.go("common.supervisor")}},h(),l(h,1e5)}]),angular.module("vilobiApp").controller("homeController",["$scope",function(e){}]),angular.module("vilobiApp").controller("machineRegularController",["$scope","$http","$stateParams","$location","$state","$interval","$timeout","$mdSidenav","$q","driverSrv","machineStateSrv","supervisorSrv","ofSrv",function(e,t,a,n,r,o,i,c,l,s,m,u,h){function d(){function a(){t.get("../../api/machine/"+p).success(function(t){for(var a=t,n=[],r=0,o=0,i=!0;15>o&&r<t.length;)e.machineInfo.of==a[r].OF&&(i=!0),new Date(a[r].DATASTART)>Date.now()&&e.machineInfo.of!=a[r].OF&&i?n[o++]=a[r++]:r++;e.sfFirst=n,h.materialAvaliable(e.machineInfo.id,n).then(function(t){t.forEach(function(e){e.avaliable&&e.avaliable.forEach(function(e,t,a){switch(e.avaliable){case 0:a[t].semaphor="semaphorRed";break;case 1:a[t].semaphor="semaphorOrange";break;case 2:a[t].semaphor="semaphorGreen"}})}),e.sfFirst=t,e.$emit("WorkingOff")})})}e.$emit("WorkingOn"),u.machineOne(p).success(function(t){e.machineInfo=t,e.machineInfo.ofState=m.get(t.status),t.quantityPlanned&&0!=t.quantityPlanned&&t.ofCompleted&&(e.machineInfo.ofCompletedPercent=100*t.ofCompleted/t.quantityPlanned),a()},function(e){console.log(e)})}var p=a.id;e.machineInfo={},e.sfFirst=[],e.goSupervisor=function(){r.go("common.supervisor")},e.goBigScreen=function(t){s.set(a.id),e.$emit("Machine"),r.go("common.machine",{id:t})},e.goBack=function(){try{var e=s.getState();r.go(e.id,{id:e.param})}catch(t){r.go("common.supervisor")}},d(),u.machinesAllTimer=o(d,1e5)}]),angular.module("vilobiApp").controller("machinesRegularController",["$scope","$http","supervisorSrv","machineStateSrv","$stateParams","$location","$state","$interval","$timeout","$mdSidenav","driverSrv",function(e,t,a,n,r,o,i,c,l,s,m){function u(){a.machinesAll(r.id).success(function(t){console.log(t),t.forEach(function(t,a){e.machines[a]=t,e.machines[a].ofState=n.get(t.status),t.quantityPlanned&&0!=t.quantityPlanned&&t.ofCompleted&&(e.machines[a].ofCompletedPercent=100*t.ofCompleted/t.quantityPlanned)})},function(e){console.log(e)})}r.id;e.machines=[],e.goSupervisor=function(){m.set(locate),m.setState(i.current.name),i.go("common.supervisor")},e.goBack=function(){m.get()?i.go("common.supervisorMachine",{id:m.get()}):i.go("common.supervisor")},e.go=function(e){m.setState(i.current.name,r.id),i.go("common.machineRegular",{id:e})},e.goBigScreen=function(t){m.setState(i.current.name,r.id),e.$emit("Machine"),i.go("common.machine",{id:t})},u(),a.machinesAllTimer=c(u,5e3)}]),angular.module("vilobiApp").controller("mainController",["$scope","$rootScope","supervisorSrv",function(e,t,a){e.bodyStyle="",e.showMenu=!0,e.breadcrumbs="home",e.$on("Machine",function(){console.log("Change body color"),e.bodyStyle="vilobiMachine",e.showMenu=!1,e.bckgrndTheme="machine"}),e.$on("MachineOut",function(){e.bodyStyle="",e.showMenu=!0,e.bckgrndTheme="default"}),e.$on("WorkingOn",function(){e.working=!0}),e.$on("WorkingOff",function(){e.working=!1}),t.$on("$stateChangeSuccess",function(t,n,r,o,i){e.breadcrumbs=n.name,a.killTimers()}),t.$on("$routeChangeStart",function(){var e=driverSrv.getState();console.log("HOLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!");try{$state.go(e.id,{id:e.param})}catch(t){$state.go("common.supervisor")}})}]),angular.module("vilobiApp").controller("materialController",["$scope","$http","$stateParams","$state",function(e,t,a,n){e.material=[],e.$emit("WorkingOn"),t.get("./api/material/"+a.id).then(function(t){var a=0;t.data.forEach(function(t,n,r){new Date(t.DATASTART)>Date.now()&&t.material.length>0&&(t.material&&t.material.forEach(function(e,a,n){t.material[a].semaphor="semaphorRed",e.RequiredQty<=e.Avalaible?t.material[a].semaphor="semaphorGreen":e.RequiredQty>e.Avalaible&&e.RequiredQty<=e.Avalaible/2&&(t.material[a].semaphor="semaphorOrange")}),e.material[a++]=t)}),e.$emit("WorkingOff")})}]),angular.module("vilobiApp").controller("menuController",["$scope","$mdSidenav","$timeout","$rootScope","$state","ssSideNav","ssSideNavSharedService",function(e,t,a,n,r,o,i){e.machine=!1,e.breadCrumbs=r.current.breadCrumbs,e.onClickMenu=function(){t("left").toggle()},e.$on("Machine",function(){e.machine=!0}),e.$on("MachineOut",function(){e.machine=!1}),e.menu=o,n.$on("$stateChangeSuccess",function(t,a,n,r,o){e.breadCrumbs=a.breadCrumbs})}]),angular.module("vilobiApp").controller("superMachineController",["$scope","supervisorSrv","driverSrv","$stateParams","$state",function(e,t,a,n,r){e.machine=n.id,e.go=function(e){a.setState(r.current.name,n.id),r.go("common.machineRegular",{id:e})},e.goBack=function(){r.go("common.supervisor")},e.goBigScreen=function(t){a.setState(r.current.name,n.id),e.$emit("Machine"),r.go("common.machine",{id:t})},t.machines(n.id).success(function(t){e.machines=t})}]),angular.module("vilobiApp").controller("supervisorController",["$scope","supervisorSrv","driverSrv","$state",function(e,t,a,n){e.go=function(e){a.set(e),a.setState(n.current.name),n.go("common.supervisorMachine",{id:e})},e.goGeneral=function(e){a.set(e),a.setState(n.current.name),n.go("common.machinesRegular",{id:e})},e.goMaterial=function(e){a.set(e),a.setState(n.current.name),n.go("common.material",{id:e})},t.departaments().success(function(a){e.depts=a,a.forEach(function(a,n){t.machines(a.WCGroup).success(function(t){e.depts[n].machines=t})})})}]),angular.module("vilobiApp").directive("sfClock",["$interval","dateFilter",function(e,t){return function(a,n,r){function o(){n.text(t(new Date,"dd/MM/yyyy HH:mm:ss"))}var i;i=e(function(){o()},1e3),n.on("$destroy",function(){e.cancel(i)})}}]),angular.module("vilobiApp").service("driverSrv",["$http",function(e){return this.lastId=null,this.lastState=[],this.set=function(e){this.lastId=e},this.get=function(){return this.lastId},this.setState=function(e,t){this.lastState.push({id:e,param:t})},this.getState=function(){return this.lastState.pop()},this}]),angular.module("vilobiApp").service("machineStateSrv",function(){return this.get=function(e){var t={};switch(e||(e=""),e.trim()){case"Down":t.name="Parat",t.icon="ic_thumb_down_black_18px.svg",t.theme="down";break;case"Pull":t.name="PULL",t.icon="ic_get_app_black_18px.svg",t.theme="pull";break;case"NCDown":t.name="parat sense carrec",t.icon="ic_sync_disabled_black_18px.svg",t.theme="ncdown";break;case"End of Operation":t.name="final operació",t.icon="ic_done_black_18px.svg",t.theme="end";break;case"Setup":t.name="manteniment",t.icon="ic_build_black_18px.svg",t.theme="setup";break;case"Process":t.name="en procés",t.icon="ic_loop_black_18px.svg",t.theme="process";break;default:t={name:"desconegut",icon:"ic_error_black_18px.svg",theme:"error"}}return t},this}),angular.module("vilobiApp").service("ofSrv",["$http","$q",function(e,t){var a,n="../../api/bom/";return this.materialAvaliable=function(r,o){var i=1;return a=t.defer(),o.forEach(function(t,o,c){e.get(n+r+"/"+t.OF).success(function(e){var t=[];0==e.length&&t.push({itemId:"No n'hi ha",avaliable:3}),e.forEach(function(e){var a={itemId:e.ItemId,avaliable:0};e.RequiredQty<=e.Avalaible?a.avaliable=2:e.RequiredQty>e.Avalaible&&e.RequiredQty<=e.Avalaible/2&&(a.avaliable=1),t.push(a)}),c[o].avaliable=t,++i>c.length&&a.resolve(c)})}),a.promise},this}]),angular.module("vilobiApp").factory("supervisorSrv",["$http","$interval",function(e,t){var a="../../api/supervisor/dept",n="../../api/supervisor/deptall",r="../../api/supervisor/deptone";return this.departaments=function(){return e.get(a)},this.machines=function(t){return e.get(a+"/"+t)},this.machinesAll=function(t){return e.get(n+"/"+t)},this.machineOne=function(t){return e.get(r+"/"+t)},this.machinesAllTimer=null,this.killTimers=function(){this.machinesAllTimer&&t.cancel(this.machinesAllTimer)},this}]);
//# sourceMappingURL=data:application/json;base64,
