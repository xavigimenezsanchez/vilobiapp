angular.module("vilobiApp",["ui.router","ngMaterial","sasrio.angular-material-sidenav"]),angular.module("vilobiApp").config(["$mdThemingProvider","ssSideNavSectionsProvider",function(e,t){t.initWithTheme(e),t.initWithSections([{id:"Home",name:"Home",state:"common.home",type:"link"},{id:"Supervisor",name:"Supervisor",state:"common.supervisor",type:"link"}])}]),angular.module("vilobiApp").config(["$mdThemingProvider",function(e){e.theme("dark-grey").backgroundPalette("grey").dark(),e.theme("dark-orange").backgroundPalette("orange").dark(),e.theme("dark-purple").backgroundPalette("deep-purple").dark(),e.theme("dark-blue").backgroundPalette("blue").dark(),e.theme("dark-red").backgroundPalette("red").dark(),e.theme("default").primaryPalette("blue").accentPalette("orange"),e.definePalette("machinePalete",{50:"ffcdd2",100:"ffcdd2",200:"ef9a9a",300:"e57373",400:"ef5350",500:"f44336",600:"e53935",700:"d32f2f",800:"c62828",900:"b71c1c",A100:"000000",A200:"ff5252",A400:"ff1744",A700:"d50000",contrastDefaultColor:"light",contrastDarkColors:["50","100","200","300","400","A100"],contrastLightColors:void 0}),e.theme("machine").primaryPalette("blue").backgroundPalette("machinePalete"),e.definePalette("breadcrumbsPaletteName",{50:"FFFFFF",100:"ffcdd2",200:"ef9a9a",300:"e57373",400:"ef5350",500:"f44336",600:"e53935",700:"d32f2f",800:"c62828",900:"b71c1c",A100:"ff8a80",A200:"ff5252",A400:"ff1744",A700:"d50000",contrastDefaultColor:"light",contrastDarkColors:["50","100","200","300","400","A100"],contrastLightColors:void 0}),e.theme("breadcrumbs").primaryPalette("breadcrumbsPaletteName",{"default":"50"})}]),angular.module("vilobiApp").config(["$stateProvider","$urlRouterProvider","$locationProvider",function(e,t,o){t.otherwise("/"),o.html5Mode(!0),t.otherwise(function(){return"/"}),e.state("common",{"abstract":!0,templateUrl:"templates/_common.html",controller:"menuController"}).state("common.home",{url:"/",templateUrl:"templates/home.html",controller:"homeController",breadCrumbs:"home"}).state("common.machine",{url:"/machine/:id",templateUrl:"/templates/machine.html",controller:"bitScreenController",breadCrumbs:"machine"}).state("common.machineRegular",{url:"/machineRegular/:id",templateUrl:"/templates/machineRegular.html",controller:"machineRegularController",breadCrumbs:"machine"}).state("common.supervisor",{url:"/supervisor",templateUrl:"/templates/supervisor2.html",controller:"supervisorController",breadCrumbs:"supervisor"}).state("common.supervisorMachine",{url:"/supervisor/:id",templateUrl:"/templates/supervisorMachine.html",controller:"superMachineController",breadCrumbs:"detall supervisor"})}]),angular.module("vilobiApp").controller("bitScreenController",["$scope","$http","$location","$state","$interval","$timeout","$mdSidenav",function(e,t,o,r,n,a,i){function c(){t.get("../../api/machine/name/"+l[l.length-1]).success(function(t){t.length>0?e.machineName=t[0].NAME:e.machineName="Error!"}),t.get("../../api/machine/actual/"+l[l.length-1]).success(function(o){e.ofActual=o[0].PrOdId,e.ofOpr=o[0].OprNum,e.ofState=o[0].LastTimeJobType,t.get("../api/of/desc/"+o[0].PrOdId).success(function(t){e.ofDescription=t[0].ItemDesc}),t.get("../api/slit/"+o[0].PrOdId).success(function(r){e.ofQtyPlanned=r[0].OrderQty,t.get("../api/of/completed/"+o[0].PrOdId+"/"+o[0].OprNum+"/"+l[l.length-1]).success(function(t){t.length>0&&(e.ofCompleted=t[0].StkQty,e.ofCompletedPercent=100*t[0].StkQty/r[0].OrderQty)})})})}var l=o.absUrl().split("/");e.$emit("Machine"),e.sfFirst=[],e.goSupervisor=function(){e.$emit("MachineOut"),r.go("common.supervisor")},t.get("../../api/machine/"+l[l.length-1]).success(function(t){for(var o=0;o<(t.length<5?t.length:5);o++)e.sfFirst[o]=t[o]}),c(),n(c,6e4)}]),angular.module("vilobiApp").controller("homeController",["$scope",function(e){}]),angular.module("vilobiApp").controller("machineRegularController",["$scope","$http","$stateParams","$location","$state","$interval","$timeout","$mdSidenav",function(e,t,o,r,n,a,i,c){function l(){t.get("../../api/machine/actual/"+s).success(function(o){e.ofActual=o[0].PrOdId,e.ofOpr=o[0].OprNum,e.ofState=o[0].LastTimeJobType,t.get("../api/of/desc/"+o[0].PrOdId).success(function(t){e.ofDescription=t[0].ItemDesc}),t.get("../api/slit/"+o[0].PrOdId).success(function(r){e.ofQtyPlanned=r[0].OrderQty,t.get("../api/of/completed/"+o[0].PrOdId+"/"+o[0].OprNum+"/"+s).success(function(t){t.length>0&&(e.ofCompleted=t[0].StkQty,e.ofCompletedPercent=100*t[0].StkQty/r[0].OrderQty)})})})}var s=o.id;e.goSupervisor=function(){n.go("common.supervisor")},t.get("../../api/machine/name/"+s).success(function(t){t.length>0?e.machineName=t[0].NAME:e.machineName="Error!"}),l(),a(l,6e4)}]),angular.module("vilobiApp").controller("mainController",["$scope","$rootScope",function(e,t){e.bodyStyle="",e.showMenu=!0,e.breadcrumbs="home",e.$on("Machine",function(){console.log("Change body color"),e.bodyStyle="vilobiMachine",e.showMenu=!1,e.bckgrndTheme="machine"}),e.$on("MachineOut",function(){e.bodyStyle="",e.showMenu=!0,e.bckgrndTheme="default"}),t.$on("$stateChangeSuccess",function(t,o,r,n,a){e.breadcrumbs=o.name})}]),angular.module("vilobiApp").controller("menuController",["$scope","$mdSidenav","$timeout","$rootScope","$state","ssSideNav","ssSideNavSharedService",function(e,t,o,r,n,a,i){e.machine=!1,console.log(n),e.breadCrumbs=n.current.breadCrumbs,e.onClickMenu=function(){t("left").toggle()},e.$on("Machine",function(){e.machine=!0}),e.$on("MachineOut",function(){e.machine=!1}),e.menu=a,r.$on("$stateChangeSuccess",function(t,o,r,n,a){e.breadCrumbs=o.breadCrumbs})}]),angular.module("vilobiApp").controller("superMachineController",["$scope","supervisorSrv","$stateParams","$state",function(e,t,o,r){e.machine=o.id,e.go=function(e){r.go("common.machineRegular",{id:e})},e.goBigScreen=function(t){e.$emit("Machine"),r.go("common.machine",{id:t})},t.machines(o.id).success(function(t){e.machines=t})}]),angular.module("vilobiApp").controller("supervisorController",["$scope","supervisorSrv","$state",function(e,t,o){e.go=function(e){o.go("common.supervisorMachine",{id:e})},t.departaments().success(function(o){e.depts=o,o.forEach(function(o,r){t.machines(o.WCGroup).success(function(t){e.depts[r].machines=t})})})}]),angular.module("vilobiApp").directive("sfClock",["$interval","dateFilter",function(e,t){return function(o,r,n){function a(){r.text(t(new Date,"dd/MM/yyyy HH:mm:ss"))}var i;i=e(function(){a()},1e3),r.on("$destroy",function(){e.cancel(i)})}}]),angular.module("vilobiApp").factory("supervisorSrv",["$http",function(e){var t="../../api/supervisor/dept";return this.departaments=function(){return e.get(t)},this.machines=function(o){return e.get(t+"/"+o)},this}]);
//# sourceMappingURL=data:application/json;base64,
